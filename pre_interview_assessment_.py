# -*- coding: utf-8 -*-
"""Pre_Interview_Assessment .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3MtIzGaZklnup8U0UI1UkuK-uybqU6k
"""

#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import OrdinalEncoder

df=pd.read_csv('/content/drive/MyDrive/ColabNotebooks/logatta.csv')
df

print(df['BusinessTravel'].unique())
print(df['MaritalStatus'].unique())
print(df['OverTime'].unique())
print(df['Gender'].unique())
print(df['accepted for the interview'].unique())

#Encoding
column1= ['Travel_Rarely', 'Travel_Frequently', 'Non-Travel']
column2= ['Single', 'Married', 'Divorced']
column3= ['Yes', 'No']
column4= ['Female', 'Male']
column5= [ False, True]

enc1=OrdinalEncoder(categories=[column1])
enc2=OrdinalEncoder(categories=[column2])
enc3=OrdinalEncoder(categories=[column3])
enc4=OrdinalEncoder(categories=[column4])
enc5=OrdinalEncoder(categories=[column5])
df['BusinessTravel']=enc1.fit_transform(df[['BusinessTravel']].astype(str))
df['MaritalStatus']=enc2.fit_transform(df[['MaritalStatus']].astype(str))
df['OverTime']=enc3.fit_transform(df[['OverTime']].astype(str))
df['Gender']=enc4.fit_transform(df[['Gender']].astype(str))
df['accepted for the interview']=enc5.fit_transform(df[['accepted for the interview']])
df

df.describe()

sns.histplot(df['DailyRate'], kde=True)
plt.show()
sns.histplot(df['Education'], kde=True, color='Red')
plt.show()

df.corr()

#Spliting the data
X= df.iloc[:,:-1].values
y= df.iloc[:,-1].values
X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, random_state=0)

#Fitting and training the data
logR = LogisticRegression()
logR.fit(X_train, y_train)

score = logR.score(X_train, y_train)
print('Accuracy: ',score)
y_pred = logR.predict(X_test)

#Accuracy score
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, classification_report, confusion_matrix
avg="micro"
acc=accuracy_score(y_test,y_pred)
f1=f1_score(y_true=y_test,y_pred=y_pred, average=avg)
recall=recall_score(y_true=y_test,y_pred=y_pred, average=avg)
precision=precision_score(y_true=y_test,y_pred=y_pred, average=avg)
print("ACC:",acc)
print("F1:",f1)
print("Recall:",recall)
print("Precision:",precision)

print(classification_report(y_test,y_pred))

cm= confusion_matrix(y_test, y_pred)
cm

sns.heatmap(cm, cmap='Greens', annot=True)
plt.show()